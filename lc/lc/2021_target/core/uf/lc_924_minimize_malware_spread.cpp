class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        vector<vector<int>>v(graph.size());
        sort(initial.begin(),initial.end());
        
	//store the relations into a array
        for(int i=0;i<graph.size();i++){
            for(int j=i+1;j<graph.size();j++){
                if(graph[i][j] == 1){
                    v[i].emplace_back(j);
                    v[j].emplace_back(i);
                }
            }
        }
        
        int index=initial[0];
        int num=0;
        for(int i=0;i<initial.size();i++){
            int temp=bfs(initial[i], v);
            if(temp > num){
                num=temp;
                index=initial[i];
            }
        }
        return index;
    }
    
    int bfs(int now, vector<vector<int>>v){
        queue<int> q;
        set<int> s;
        q.push(now);
        s.insert(now);
        while(!q.empty()){
            int point=q.front();
            q.pop();
            for(auto it: v[point]){
                if(s.count(it) == 0){
                    s.insert(it);
                    q.push(it);
                }
            }
        }
        return s.size();
    }
    
};
